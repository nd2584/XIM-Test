{"remainingRequest":"/Users/DeJen831/XIM-Test/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/DeJen831/XIM-Test/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/DeJen831/XIM-Test/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/DeJen831/XIM-Test/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/DeJen831/XIM-Test/src/types/Tower_on_Podium.md?vue&type=template&id=ac0a14d4&","dependencies":[{"path":"/Users/DeJen831/XIM-Test/src/types/Tower_on_Podium.md","mtime":1608497673583},{"path":"/Users/DeJen831/XIM-Test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/DeJen831/XIM-Test/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/DeJen831/XIM-Test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/DeJen831/XIM-Test/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/DeJen831/XIM-Test/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}