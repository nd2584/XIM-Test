{"remainingRequest":"/Users/DeJen831/XIM-GSAPP-Fa20/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/DeJen831/XIM-GSAPP-Fa20/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/DeJen831/XIM-GSAPP-Fa20/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/DeJen831/XIM-GSAPP-Fa20/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/DeJen831/XIM-GSAPP-Fa20/src/tools/team_1/README.md?vue&type=template&id=545e5d68&","dependencies":[{"path":"/Users/DeJen831/XIM-GSAPP-Fa20/src/tools/team_1/README.md","mtime":1605079656171},{"path":"/Users/DeJen831/XIM-GSAPP-Fa20/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/DeJen831/XIM-GSAPP-Fa20/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/DeJen831/XIM-GSAPP-Fa20/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/DeJen831/XIM-GSAPP-Fa20/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/DeJen831/XIM-GSAPP-Fa20/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}