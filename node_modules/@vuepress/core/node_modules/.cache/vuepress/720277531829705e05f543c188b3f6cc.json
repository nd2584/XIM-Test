{"remainingRequest":"/Users/DeJen831/XIM-Test/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/DeJen831/XIM-Test/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/DeJen831/XIM-Test/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/DeJen831/XIM-Test/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/DeJen831/XIM-Test/src/projects/README.md?vue&type=template&id=5a000403&","dependencies":[{"path":"/Users/DeJen831/XIM-Test/src/projects/README.md","mtime":1608416060419},{"path":"/Users/DeJen831/XIM-Test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/DeJen831/XIM-Test/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/DeJen831/XIM-Test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/DeJen831/XIM-Test/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/DeJen831/XIM-Test/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}